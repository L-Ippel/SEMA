data_frame = test_data)
set.seed(653)
library(SEMA)
set.seed(653)
test_data <- build_dataset(n = 1500, j = 200,
fixed_coef = 1:5,
random_coef_sd = 1:3,
resid_sd = 2)
check <- sema_fit_df(formula = y ~ V2 + V3 + V4 + V5 + V6 + (V2 + V4 + V5 | id),
data_frame = test_data)
document()
library(SEMA)
set.seed(653)
test_data <- build_dataset(n = 1500, j = 200,
fixed_coef = 1:5,
random_coef_sd = 1:3,
resid_sd = 2)
check <- sema_fit_df(formula = y ~ V2 + V3 + V4 + V5 + V6 + (V2 + V4 + V5 | id),
data_frame = test_data)
check$model
test_data
formula = y ~ V2 + V3 + V4 + V5 + V6 + (V2 + V4 + V5 | id)
data_frame = test_data
intercept = TRUE
print_every = NA
store_every = NA
start_resid_var = 1
start_random_var = 1
start_fixed_coef = NULL
check
check$model
check$unit[[1]]
#' try_solve is a function which tries to invert the \code{X'X} matrix.
#' @param x_sq A square matrix of fixed effects variables squared.
#' @return If succesful: the inverted matrix;
#'  If not succesful: NULL;
try_solve <- function(x_sq){
tryCatch(solve(x_sq),
error = function(e){
return(NULL)
})
}
#' update_x_inv is the online update function of the inverse matrix.
#' @param data_fixed A fixed covariates vector from the new data point.
#' @param x_inv The current inverted matrix.
#' @return The updated inverted matrix.
update_x_inv <- function(data_fixed,
x_inv){
return(
x_inv - ((x_inv %*% data_fixed %*% t(data_fixed) %*% x_inv) /
as.numeric((1 + t(data_fixed) %*% x_inv %*% data_fixed))))
}
#' compute_fixed_coef computes the coefficients of the fixed effects,
#'   see from raudenbush and bryk (2002) Hierarchial linear models, 2nd edition,
#'   EQUATION 14.10.
#' @param x_inv The inverted matrix of the fixed effects variables.
#' @param xy The product of fixed effects variables and dependent variable.
#' @param t1 A vector with Complete Data Sufficient Statistics of the
#'   fixed effects.
#' @return A vector with fixed effects coefficients.
compute_fixed_coef <- function(x_inv,
xy,
t1){
return(x_inv %*% (xy - t1)) #estimation of fixed coefficients 1xp
}
#' compute_random_var computes the variance of the random effects
#'   see from raudenbush and bryk (2002) Hierarchial linear models, 2nd edition,
#'   EQUATION 14.10.
#' @param t2 A matrix with Complete Data Sufficient Statisticsof the
#'   random effects.
#' @param units The total number of units (scalar).
#' @return A matrix with variance of the random effects.
compute_random_var <- function(t2,
units){
return(t2 / units)
}
#' compute_resid_var computes the residual variance.
#' @param t3 The Complete Data Sufficient Statistic of the residual variance,
#'   a scalar.
#' @param n The number of observations.
#' @return The residual variance (scalar).
compute_resid_var <- function(t3,
n){
return(as.numeric(t3 / n))
}
set.seed(653)
test_data <- build_dataset(n = 1500, j = 200,
fixed_coef = 1:5,
random_coef_sd = 1:3,
resid_sd = 2)
check <- sema_fit_df(formula = y ~ V2 + V3 + V4 + V5 + V6 + (V2 + V4 + V5 | id),
data_frame = test_data)
check$model
check <- sema_fit_df(formula = y ~ V2 + V3 + V4 + V5 + V6 + (V2 + V4 + V5 | id),
data_frame = test_data,intercept = TRUE)
check$model
library(SEMA)
set.seed(653)
test_data <- build_dataset(n = 1500, j = 200,
fixed_coef = 1:5,
random_coef_sd = 1:3,
resid_sd = 2)
check <- sema_fit_df(formula = y ~ V2 + V3 + V4 + V5 + V6 + (V2 + V4 + V5 | id),
data_frame = test_data,intercept = TRUE)
check$model
check$model$fixed_coef_hat
test_coef <- 1:4
zy <- as.matrix(sqrt(diag(z_sq)) / 3, ncol = 3)
zx <- matrix(1:12, nrow = 4)
z_sq <- matrix(1:9, nrow = 3)
resid_var <- 5
random_var <- diag(3)
test_coef <- 1:4
zy <- as.matrix(sqrt(diag(z_sq)) / 3, ncol = 3)
zx <- matrix(1:12, nrow = 4)
test_c_inv <-  compute_c_inv(z_sq, resid_var, random_var)
test_that("Estep functions", {
expect_is(test_c_inv, "matrix")
expect_equal(sum(is.na(test_c_inv)), 0)
expect_length(test_c_inv[1, ], 3)
expect_length(test_c_inv[, 1], 3)
})
compute_random_coef(c_inv = test_c_inv,
fixed_coef = test_coef,
zy,
zx)
test_coef <- matrix(1:4, nrow = 4)
compute_random_coef(c_inv = test_c_inv,
fixed_coef = test_coef,
zy,
zx)
check$unit[[1]]$c_inv
test_c_inv
check$unit[[1]]$zy
zy
zy <- as.matrix(sqrt(diag(z_sq)) / 3, nrow = 3)
check$unit[[1]]$zx_mat
zx <- matrix(1:12, nrow = 4)
compute_random_coef(c_inv = test_c_inv,
fixed_coef = test_coef,
zy,
zx)
t(zx) %*% fixed_coef
fixed_coef = test_coef
t(zx) %*% fixed_coef
(t(zy) - t(zx) %*% fixed_coef)
t(zy)
t(zx) %*% fixed_coef
t(zx) %*% fixed_coef
check$unit[[1]]$zy
theta_j$zy
zy
zy <- as.matrix(sqrt(diag(z_sq)) / 3, ncol = 3)
test_c_inv %*% (t(zy) - t(zx) %*% fixed_coef)
t(zy)
zy
zy <- as.matrix(sqrt(diag(z_sq)) / 3, ncol = 3)
zy
t(zx) %*% fixed_coef)
t(zx) %*% fixed_coef
zy <- matrix(sqrt(diag(z_sq)) / 3, ncol = 3)
test_c_inv %*% (t(zy) - t(zx) %*% fixed_coef)
compute_random_coef(c_inv = test_c_inv,
fixed_coef = test_coef,
zy,
zx)
test_random_coef <- compute_random_coef(c_inv = test_c_inv,
fixed_coef = test_coef,
zy,
zx)
class(test_random_coef)
compute_t1_j(zx = zx_mat, random_coef = test_random_coef)
compute_t1_j(zx = zx, random_coef = test_random_coef)
compute_t2_j(random_coef = test_random_coef,
resid_var,
c_inv  = test_c_inv)
diag(test_t2)
test_t2 <- compute_t2_j(random_coef = test_random_coef,
resid_var,
c_inv  = test_c_inv)
diag(test_t2)
diag(test_t2)>=0
expect_gt(diag(test_t2), 0)
expect_gt(diag(test_t2[1]), 0)
expect_gt((test_t2[1,1]), 0)
test_that("Estep CDSSt2", {
expect_is(test_t2, "matrix")
expect_equal(sum(is.na(test_t2)), 0)
expect_length(test_t2[, 1], 3)
expect_length(test_t2[1, ], 3)
expect_gt((test_t2[1,1]), 0)
expect_gt((test_t2[2,2]), 0)
expect_gt((test_t2[3,3]), 0)
})
matrix(1:25, nrow = 5)
check$unit$xy
check$unit$xy_vec
check$unit$xy_vector
check$unit
parameters_j <- list(ysq = 9,
c_inv = test_c_inv,
x_sq = matrix(1:16, nrow = 4),
z_sq = z_sq,
xy = matrix(1:4, nrow = 1),
zy = zy,
zx = zx)
compute_t3_j(parameters_j,
random_coef = test_random_coef,
fixed_coef = test_coef,
resid_var = 5)
test_random_coef
test_t3 <- compute_t3_j(parameters_j,
random_coef = t(test_random_coef),
fixed_coef = test_coef,
resid_var = 5)
test_t3
random_coef = t(test_random_coef)
fixed_coef = test_coef
resid_var = 5
fixed_coef_sq_matrix     <- fixed_coef %*% t(fixed_coef)
fixed_random_coef_matrix <- fixed_coef %*% random_coef
random_coef_sq_matrix    <- t(random_coef) %*% random_coef
parameters_j$y_sq +
sum(fixed_coef_sq_matrix * parameters_j$x_sq) +
sum(random_coef_sq_matrix * parameters_j$z_sq) -
2 * sum(t(fixed_coef) * parameters_j$xy) -
2 * sum(random_coef * parameters_j$zy) +
2 * sum(parameters_j$zx * fixed_random_coef_matrix) +
resid_var * sum(diag(parameters_j$c_inv %*% parameters_j$z_sq))
test_c_inv
parameters_j$y_sq
parameters_j <- list(y_sq = 9,
c_inv = test_c_inv,
x_sq = matrix(1:16, nrow = 4),
z_sq = z_sq,
xy = matrix(1:4, nrow = 1),
zy = zy,
zx = zx)
test_t3 <- compute_t3_j(parameters_j,
random_coef = t(test_random_coef),
fixed_coef = test_coef,
resid_var = 5)
test_t3
parameters_j <- list(y_sq = 9,
c_inv = test_c_inv,
x_sq = matrix(1:16, nrow = 4),
z_sq = z_sq,
xy = matrix(3:7, nrow = 1),
zy = zy,
zx = zx)
test_t3 <- compute_t3_j(parameters_j,
random_coef = t(test_random_coef),
fixed_coef = test_coef,
resid_var = 5)
parameters_j <- list(y_sq = 9,
c_inv = test_c_inv,
x_sq = matrix(1:16, nrow = 4),
z_sq = z_sq,
xy = matrix((1:4) * 3, nrow = 1),
zy = zy,
zx = zx)
test_t3 <- compute_t3_j(parameters_j,
random_coef = t(test_random_coef),
fixed_coef = test_coef,
resid_var = 5)
test_t3
1:4 %*% t(1:4)
z_sq
zx
parameters_j <- list(y_sq = 9,
c_inv = test_c_inv,
x_sq = 1:4 %*% t(1:4),
z_sq = z_sq,
xy = matrix((1:4) * 3, nrow = 1),
zy = zy,
zx = zx)
test_t3 <- compute_t3_j(parameters_j,
random_coef = t(test_random_coef),
fixed_coef = test_coef,
resid_var = 5)
test_t3
test_coef
test_random_coef
test_random_coef
test_coef <- matrix(4:7, nrow = 4)
zy <- matrix(sqrt(diag(z_sq)) / 3, ncol = 3)
zx <- matrix(1:12, nrow = 4)
test_c_inv <-  compute_c_inv(z_sq, resid_var, random_var)
test_that("Estep c_inv", {
expect_is(test_c_inv, "matrix")
expect_equal(sum(is.na(test_c_inv)), 0)
expect_length(test_c_inv[1, ], 3)
expect_length(test_c_inv[, 1], 3)
})
test_random_coef <- compute_random_coef(c_inv = test_c_inv,
fixed_coef = test_coef,
zy,
zx)
test_that("Estep random coefficient", {
expect_is(test_random_coef, "matrix")
expect_equal(sum(is.na(test_random_coef)), 0)
expect_length(test_random_coef[, 1], 3)
})
test_t1 <- compute_t1_j(zx = zx, random_coef = test_random_coef)
test_that("Estep CDSSt1", {
expect_is(test_t1, "matrix")
expect_equal(sum(is.na(test_t1)), 0)
expect_length(test_t1[, 1], 4)
})
test_t2 <- compute_t2_j(random_coef = test_random_coef,
resid_var,
c_inv  = test_c_inv)
test_that("Estep CDSSt2", {
expect_is(test_t2, "matrix")
expect_equal(sum(is.na(test_t2)), 0)
expect_length(test_t2[, 1], 3)
expect_length(test_t2[1, ], 3)
expect_gt((test_t2[1,1]), 0)
expect_gt((test_t2[2,2]), 0)
expect_gt((test_t2[3,3]), 0)
})
parameters_j <- list(y_sq = 9,
c_inv = test_c_inv,
x_sq = 1:4 %*% t(1:4),
z_sq = z_sq,
xy = matrix((1:4) * 3, nrow = 1),
zy = zy,
zx = zx)
test_t3 <- compute_t3_j(parameters_j,
random_coef = t(test_random_coef),
fixed_coef = test_coef,
resid_var = 5)
test_t3
parameters_j <- list(y_sq = 49,
c_inv = test_c_inv,
x_sq = 1:4 %*% t(1:4),
z_sq = z_sq,
xy = matrix((1:4) * 3, nrow = 1),
zy = zy,
zx = zx)
test_t3 <- compute_t3_j(parameters_j,
random_coef = t(test_random_coef),
fixed_coef = test_coef,
resid_var = 5)
test_t3
test_coef
test_coef <- matrix(1:4, nrow = 4)
zy <- matrix(sqrt(diag(z_sq)) / 3, ncol = 3)
zx <- matrix(1:12, nrow = 4)
test_c_inv <-  compute_c_inv(z_sq, resid_var, random_var)
test_that("Estep c_inv", {
expect_is(test_c_inv, "matrix")
expect_equal(sum(is.na(test_c_inv)), 0)
expect_length(test_c_inv[1, ], 3)
expect_length(test_c_inv[, 1], 3)
})
test_random_coef <- compute_random_coef(c_inv = test_c_inv,
fixed_coef = test_coef,
zy,
zx)
test_that("Estep random coefficient", {
expect_is(test_random_coef, "matrix")
expect_equal(sum(is.na(test_random_coef)), 0)
expect_length(test_random_coef[, 1], 3)
})
test_t1 <- compute_t1_j(zx = zx, random_coef = test_random_coef)
test_that("Estep CDSSt1", {
expect_is(test_t1, "matrix")
expect_equal(sum(is.na(test_t1)), 0)
expect_length(test_t1[, 1], 4)
})
test_t2 <- compute_t2_j(random_coef = test_random_coef,
resid_var,
c_inv  = test_c_inv)
test_that("Estep CDSSt2", {
expect_is(test_t2, "matrix")
expect_equal(sum(is.na(test_t2)), 0)
expect_length(test_t2[, 1], 3)
expect_length(test_t2[1, ], 3)
expect_gt((test_t2[1,1]), 0)
expect_gt((test_t2[2,2]), 0)
expect_gt((test_t2[3,3]), 0)
})
parameters_j <- list(y_sq = 49,
c_inv = test_c_inv,
x_sq = 1:4 %*% t(1:4),
z_sq = z_sq,
xy = matrix((1:4) * 3, nrow = 1),
zy = zy,
zx = zx)
test_t3 <- compute_t3_j(parameters_j,
random_coef = t(test_random_coef),
fixed_coef = test_coef,
resid_var = 5)
test_t3
test_coef
test_t3
class(test_t3)
is.na(check)
is.na(check$model)
sum(is.na(check$model))==0
length(check)
length(check2)
check2 <- NULL
data_fixed_var <- c(3:7)
data_random_var <- c(3, 5, 6)
for(i in 1:nrow(test_data)){
print <- (i %% 1000) == 0
check2 <- sema_fit_set(data_fixed = test_data[i, data_fixed_var],
data_random = test_data[i, data_random_var],
data_y = test_data$y[i],
id = test_data$id[i],
theta_list = check2,
print = print)
}
test_that("sema_fit_set fits a simple model ",
{
expect_is(check2, "list")
expect_length(check2, 3)
expect_equal(sum(is.na(check2$model)), 0)
expect_equal(sum(is.na(check2$unit)), 0)
})
check2
test_that("sema_fit_one fits a simple model ",
{
expect_is(check3, "list")
expect_length(check2, 2)
expect_equal(sum(is.na(check3$model)), 0)
expect_equal(sum(is.na(check3$unit)), 0)
})
id_records		     <- list(NA)
class(id_records)  <- c("list", "sema")
id_vector		       <- c()
check3                <- NULL
print              <- FALSE
for(i in 1:nrow(test_data)){
id <- test_data$id[i]
if(!is.element(id, id_vector)){
id_vector		 <- c(id_vector, id)
temp_id			 <- which(id_vector == id)
id_suff_stat <- NULL
}
else{
temp_id		   <- which(id_vector == id)
id_suff_stat <- id_records[[temp_id]]
}
check3		<- sema_fit_one(data_fixed = as.numeric(test_data[i, data_fixed_var]),
data_random = as.numeric(test_data[i, data_random_var]),
data_y      = test_data$y[i],
theta       = check3$model,
theta_j     = id_suff_stat,
id          = test_data$id[i],
print       = print)
id_records[[temp_id]]	<- check3$unit
}
test_that("sema_fit_one fits a simple model ",
{
expect_is(check3, "list")
expect_length(check2, 2)
expect_equal(sum(is.na(check3$model)), 0)
expect_equal(sum(is.na(check3$unit)), 0)
})
expect_length(check3, 2)
test_that("sema_fit_one fits a simple model ",
{
expect_is(check3, "list")
expect_length(check3, 2)
expect_equal(sum(is.na(check3$model)), 0)
expect_equal(sum(is.na(check3$unit)), 0)
})
devtools::use_testthat()
devtools::use_testthat()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
document()
devtools::missing_s3()
?summary.sema
document()
?summary.sema
document()
?summary.sema
document()
?summary_sema
document()
?summary_sema
?sema_fit_one
document()
?summary.sema
test(\)
test()
devtools::missing_s3()
document()
devtools::missing_s3()
document()
devtools::missing_s3()
document()
devtools::missing_s3()
document()
devtools::missing_s3()
document()
devtools::missing_s3()
devtools::document()
devtools::missing_s3()
?summary.sema
document()
test()
build()
check()
